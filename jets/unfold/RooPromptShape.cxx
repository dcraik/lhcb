/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooPromptShape.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
//#include <math.h> 
#include "TMath.h" 

//ClassImp(RooPromptShape) 

 RooPromptShape::RooPromptShape(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mu,
                        RooAbsReal& _sigma,
                        RooAbsReal& _epsilon,
                        RooAbsReal& _rhoL,
                        RooAbsReal& _rhoR) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mu("mu","mu",this,_mu),
   sigma("sigma","sigma",this,_sigma),
   epsilon("epsilon","epsilon",this,_epsilon),
   rhoL("rhoL","rhoL",this,_rhoL),
   rhoR("rhoR","rhoR",this,_rhoR)
 { 
 } 


 RooPromptShape::RooPromptShape(const RooPromptShape& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mu("mu",this,other.mu),
   sigma("sigma",this,other.sigma),
   epsilon("epsilon",this,other.epsilon),
   rhoL("rhoL",this,other.rhoL),
   rhoR("rhoR",this,other.rhoR)
 { 
 } 



 Double_t RooPromptShape::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   //return 1.0 ; 
   if(x < mu - rhoL*sigma*(1-epsilon)) return TMath::Exp(rhoL*rhoL/2. + rhoL*(x-mu)/((1-epsilon)*sigma));
   else if(x < mu ) return TMath::Exp(-1.*((x-mu)*(x-mu)/(2*(1-epsilon)*(1-epsilon)*sigma*sigma)));
   else if(x < mu + rhoR*sigma*(1+epsilon)) return TMath::Exp(-1.*((x-mu)*(x-mu)/(2*(1+epsilon)*(1+epsilon)*sigma*sigma)));
   else return TMath::Exp(rhoR*rhoR/2. - rhoR*(x-mu)/((1+epsilon)*sigma));
 } 



